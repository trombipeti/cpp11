#ifndef STRING_H
#define STRING_H

#include <cstring>

/** \brief
    * String értékeket és a hozzájuk tartozó referenciaszámlálókat tartalmazó
    * és kezelő segédobjektum.
    */
class StringValue
{
public:

    /** \brief
     * Az egyetlen konstruktora az osztálynak. A megadott stringértéket eltárolja,
     * a referenciaszámlálót pedig 1-re állítja.
     */
    explicit StringValue( const char* str ) : m_refCount {1}
    {
        m_string = new char[strlen( str ) + 1];
        strncpy( m_string, str, strlen( str ) );
        m_string[strlen( str ) + 1] = '\0';
    }

    operator const char*() const
    {
        return m_string;
    }

    /** \brief
     * Megnöveli a StringValue referenciaszámlálóját.
     * \return A megnövelt referenciaszámláló új értéke.
     */
    unsigned long int increase_refCount()
    {
        return ++m_refCount;
    }

    /** \brief
     * Csökkenti a StringValue referenciaszámlálóját, ha az nagyobb, mint 0.
     *
     * \return A csökkentett referenciaszámláló új értéke
     */
    unsigned long int decrease_refCount() throw( const char* )
    {
        if( m_refCount > 0 ) return --m_refCount;
        else throw "StringValue reference counter is 0 already";
    }
private:
    unsigned long int m_refCount;
    char* m_string;
};

class String
{
public:

    /** \brief
     * Új Stringet hoz létre hagyományos C stringből.
     * \param str Az értékként adott C string. Ha nincs megadva, akkor üres stringre inicializálódik az objektum.
     */
    String( const char* str  = "" );

    String( String const& other );

    String & operator=( String const & other );

//    String & operator=( String && rval );

    ~String();

    operator const char*() const
    {
        return ( const char* )m_stringValue;
    }

private:

    void abandon_stringValue( void )
    {
        if( m_stringValue->decrease_refCount() == 0 )
        {
            delete m_stringValue;
        }
    }

    StringValue* obtain_stringValue( void ) const
    {
        m_stringValue->increase_refCount();
        return m_stringValue;
    }

    StringValue* m_stringValue;
};

#endif /* STRING_H */

